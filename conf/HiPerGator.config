/**
    RUMP: A Reproducible Untargeted Metabolomics Data Processing Pipeline
    Description : This file in the configuration of RUMP, including resource allocation and parameters information
    Copyright   : (C) LemasLab
    Author      : Xinsong Du
    License     : GNU GPL-v3.0 License
          
    This script is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    This script is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.
    
    You should have received a copy of the GNU General Public License
    along with this script.  If not, see <http://www.gnu.org/licenses/>.
    
    For any bugs or problems found, please contact us at
    - xinsongdu@ufl.edu, manfiol@ufl.edu, djlemas@ufl.edu; 
    - https://github.com/lemaslab/RUMP
*/

params
{
    input_dir_pos = "data/POS/"
    input_dir_neg = "data/NEG/"
    POS_design_path = "data/pos_design.csv"
    NEG_design_path = "data/neg_design.csv"
    pos_library = "positive_library.csv"
    neg_library = "negative_library.csv"

    max_cpus = 20
    max_memory = 200.GB
    max_time = 24.h
}

process 
{
//    executor = 'slurm'  
    cpus = { check_max( 20 * task.attempt, 'cpus' ) }
    memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    time = { check_max( 24.h * task.attempt, 'time' ) }

    withName: input_check
    {
        time =  '15m'
        cpus = 1
        memory = '4 GB'  
    }
    withName: mqc_data_info
    {
        time =  '15m'
        cpus = 1
        memory = '3 GB'  
    }
    withName: pos_peakDetection_mzmine
    {
        cpus = { check_max( 10 * task.attempt, 'cpus' ) }
        memory = { check_max( 100.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h * task.attempt, 'time' ) }
    }
    withName: neg_peakDetection_mzmine
    {
        cpus = { check_max( 10 * task.attempt, 'cpus' ) }
        memory = { check_max( 100.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h * task.attempt, 'time' ) }
    }
    withName: blank_subtraction
    {
        time =  '15m'
        cpus = 1
        memory = '4 GB'   
    }
    withName: pca_nobg
    {
        time =  '15m'
        cpus = 1
        memory = '4 GB'   
    }
    withName: pca_withbg
    {
        time =  '15m'
        cpus = 1
        memory = '4 GB'   
    }
    withName: venn_diagram_nobg
    {
        time =  '15m'
        cpus = 1
        memory = '4 GB'   
    }
    withName: venn_diagram_withbg
    {
        time =  '15m'
        cpus = 1
        memory = '4 GB'   
    }
    withName: bar_plot_nobg
    {
        time =  '15m'
        cpus = 1
        memory = '4 GB'   
    }
    withName: bar_plot_withbg
    {
        time =  '15m'
        cpus = 1
        memory = '4 GB'   
    }
    withName: unknown_search_nobg
    {
        time =  '1800m'
        cpus = 1
        memory = '4 GB'   
    }
    withName: unknown_search_withbg
    {
        time =  '1800m'
        cpus = 1
        memory = '4 GB'   
    }
    withName: mqc_figs
    {
        time =  '15m'
        cpus = 1
        memory = '4 GB'   
    }
    withName: report_generator
    {
        time =  '15m'
        cpus = 1
        memory = '4 GB'   
    }
    withName: mummichog_report_nobg
    {
        time = '15m'
        cpus = 1
        memory = '4GB'
    }
    withName: mummichog_report_withbg
    {
        time = '15m'
        cpus = 1
        memory = '4GB'
    }
}