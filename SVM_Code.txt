import csv
import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt 
from sklearn.preprocessing import normalize
from sklearn.preprocessing import scale
import sklearn
import math
import array as arr
import argparse

csv_file="C:\\Users\\haile\\RUMP\\functional_test\\sample_results\\peak_table\\pos_data_after_blank_subtraction.csv"

df= pd.read_csv(csv_file)

new_list=[]
new_list_2=[]


############## Average NOC Values ###################

sum_NOC=[]
sum_NOC_2=[]
sum_NOC_3=[]
sum_NOC_4=[]
sum_NOC_5=[]
sum_NOC_6=[]
sum_NOC_7=[]
sum_NOC_8=[]

for i in range(815):
    sum_1_NOC=df["QE2_sbs_11_11[27NOC].mzXML Peak height"].values[i]
    sum_2_NOC=df["QE2_sbs_11_15[29NOC].mzXML Peak height"].values[i]
    sum_3_NOC=df["QE2_sbs_11_12[30NOC].mzXML Peak height"].values[i]
    sum_4_NOC=df["QE2_sbs_11_23[28NOC].mzXML Peak height"].values[i]
    sum_5_NOC=df["QE2_sbs_11_36[31NOC].mzXML Peak height"].values[i]
    sum_6_NOC=df["QE2_sbs_11_22[26NOC].mzXML Peak height"].values[i]
    sum_7_NOC=df["QE2_sbs_11_33[25NOC].mzXML Peak height"].values[i]
    sum_8_NOC=df["QE2_sbs_11_41[32NOC].mzXML Peak height"].values[i]
    sum_NOC.append(sum_1_NOC)
    sum_NOC_2.append(sum_2_NOC)
    sum_NOC_3.append(sum_3_NOC)
    sum_NOC_4.append(sum_4_NOC)
    sum_NOC_5.append(sum_5_NOC)
    sum_NOC_6.append(sum_6_NOC)
    sum_NOC_7.append(sum_7_NOC)
    sum_NOC_8.append(sum_8_NOC)

sum_NOC=np.array(sum_NOC)
sum_NOC_2=np.array(sum_NOC_2)
sum_NOC_3=np.array(sum_NOC_3)
sum_NOC_4=np.array(sum_NOC_4)
sum_NOC_5=np.array(sum_NOC_5)
sum_NOC_6=np.array(sum_NOC_6)
sum_NOC_7=np.array(sum_NOC_7)
sum_NOC_8=np.array(sum_NOC_8)

av=np.vstack((sum_NOC, sum_NOC_2, sum_NOC_3, sum_NOC_4, sum_NOC_5, sum_NOC_6, sum_NOC_7, sum_NOC_8)).T

av_calculated=np.mean(av, axis=1)

############ Average N Values #######################

sum_N=[]
sum_N_2=[]
sum_N_3=[]
sum_N_4=[]
sum_N_5=[]
sum_N_6=[]
sum_N_7=[]
sum_N_8=[]

for i in range(815):
    sum_1_N=df["QE2_sbs_11_19[16N].mzXML Peak height"].values[i]
    sum_2_N=df["QE2_sbs_11_20[11N].mzXML Peak height"].values[i]
    sum_3_N=df["QE2_sbs_11_32[15N].mzXML Peak height"].values[i]
    sum_4_N=df["QE2_sbs_11_28[12N].mzXML Peak height"].values[i]
    sum_5_N=df["QE2_sbs_11_46[14N].mzXML Peak height"].values[i]
    sum_6_N=df["QE2_sbs_11_40[13N].mzXML Peak height"].values[i]
    sum_7_N=df["QE2_sbs_11_8[9N].mzXML Peak height"].values[i]
    sum_8_N=df["QE2_sbs_11_7[10N].mzXML Peak height"].values[i]
    sum_N.append(sum_1_N)
    sum_N_2.append(sum_2_N)
    sum_N_3.append(sum_3_N)
    sum_N_4.append(sum_4_N)
    sum_N_5.append(sum_5_N)
    sum_N_6.append(sum_6_N)
    sum_N_7.append(sum_7_N)
    sum_N_8.append(sum_8_N)

sum_N=np.array(sum_N)
sum_N_2=np.array(sum_N_2)
sum_N_3=np.array(sum_N_3)
sum_N_4=np.array(sum_N_4)
sum_N_5=np.array(sum_N_5)
sum_N_6=np.array(sum_N_6)
sum_N_7=np.array(sum_N_7)
sum_N_8=np.array(sum_N_8)

av_N=np.vstack((sum_N, sum_N_2, sum_N_3, sum_N_4, sum_N_5, sum_N_6, sum_N_7, sum_N_8)).T
av_N_calculated=np.mean(av_N, axis=1)

############### Combine N and NOC Arrays #################

NOC_new=[]
N_new=[]

for g,h in zip(av_calculated, av_N_calculated):
    NOC_new.append(g)
    N_new.append(h)

NOC_new=np.array(NOC_new)
N_new=np.array(N_new)

av_total=np.vstack((NOC_new, N_new))

######## Y Array #############

y=[1,0]

######### Feature Names ###########

cols=["row m/z", "row retention time", "row ID"]
row_charge=[]
row_time=[]
df=pd.read_csv(csv_file, usecols=cols)

value=df["row m/z"]
row_ID=df["row ID"]
value_2=df["row retention time"]
for x in value:
    row_charge.append(x)
row_charge_round=[round(num, 3) for num in row_charge]

feature_names=[]

for x in value_2:
    row_time.append(x)
row_time_round=[round(num, 3) for num in row_time]

for t,u in zip(row_charge_round, row_time_round):
    feature_names.append("%s_%s"%(t,u))

feature_names=np.array(feature_names)

############ SVM ##########

from sklearn.svm import LinearSVC
from sklearn import svm
from sklearn.svm import SVC
from sklearn import inspection

clf=LinearSVC(C=10, random_state=0, max_iter=1000)
clf.fit(av_total, y)

######## Plot Feature Selection ###########

def plot_coefficients(classifier, feature_names, top_features=10):
 coef = classifier.coef_.ravel()
 top_positive_coefficients = np.argsort(coef)[-top_features:]
 top_negative_coefficients = np.argsort(coef)[:top_features]
 top_coefficients = np.hstack([top_negative_coefficients, top_positive_coefficients])
 # create plot
 plt.figure(figsize=(15, 5))
 colors = ['red' if c < 0 else 'blue' for c in coef[top_coefficients]]
 plt.bar(np.arange(2 * top_features), coef[top_coefficients], color=colors)
 feature_names = np.array(feature_names)
 plt.xlabel("Metabolite Identity")
 plt.suptitle("Top Positive and Negative Features")
 plt.ylabel("Relative Importance")
 plt.xticks(np.arange(1, 1 + 2 * top_features), feature_names[top_coefficients], rotation=60, ha='right')
 plt.show()

plot_coefficients(clf, feature_names)